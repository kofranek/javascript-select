https://www.youtube.com/watch?v=35va4OY7Y1c

instalace parcel bundler
https://en.parceljs.org/

install -g parcel-bundler

vytvoření souborů
  index.js:
      import {Select} from './select/select.js'
      import './select/styles.scss'
      const select = new Select()

vytvoření složky select a v ní souborů:
   select.js
   styles.js

soubor ./select/select.js:

         export class Select{
         }

souboor ./select/styles.csss:

      .app{
        padding-top: 5rem;
        display: flex;
        justify-content: center;
      }

      .wrap{
        width: 500px;
      }

soubor index.html (a v něm odkaz na <script src="index.js"></script>)
        <!doctype html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport"
                  content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
            <meta http-equiv="X-UA-Compatible" content="ie=edge">
            <title>Select</title>
        </head>
        <body>
        <div class="app">
            <div class="wrap">
                123
            </div>
        </div>

        <script src="index.js"></script>
        </body>
        </html>

spuštění:
   parcel index.html

Server running at http://localhost:1234

 preprocesor vytvořil
    package.json
    package-lock.json
    složky
     dist
     node_modules
     .cache

****PRVNÍ COMMIT****

vytvoření rozložení (styly).


pracujeme

1. s index.html:
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport"
              content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
        <meta http-equiv="X-UA-Compatible" content="ie=edge">
        <script src="https://kit.fontawesome.com/815f4dfefe.js" crossorigin="anonymous"></script>
        <title>Select</title>
    </head>
    <body>
    <div class="app">
        <div class="wrap">
            <div class="select open">
                <div class="select__input">
                    <span>
                        příliš žluťoučký kůň úpěl ďábelské ódy
                    </span>
                    <i class="fas fa-chevron-down"></i>
                </div>
                <div class="select__dropdown">
                    <ul class="select__list">
                        <li class="select__item">123</li>
                        <li class="select__item">123</li>
                        <li class="select__item">123</li>
                        <li class="select__item">123</li>
                        <li class="select__item">123</li>
                        <li class="select__item">123</li>
                        <li class="select__item">123</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <script src="index.js"></script>
    </body>
    </html>

pracujeme s styles.csss:

    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

   body{
      font-family: 'Roboto', sans-serif;
    }

    .app{
      padding-top: 5rem;
      display: flex;
      justify-content: center;
    }
    .wrap{
      width: 500px;
    }

    $height: 46px;

    .select{
      width: 100%;
      position: relative;

      &.open{
        .select__dropdown{
          display: block;
        }
        .select__input{
          border-bottom: none;
        }

      &__input{
        border: 1px solid #ccc;
        border-radius: 5px;
        height: $height;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 1rem;
        cursor:pointer;
      }

      &__dropdown{
        display: none;
        position: absolute;
        border: 1px solid #ccc;
        border-radius: 5px;
        top: $height;
        left:0;
        right:0;
        max-height:200px;
        overflow-y:auto;
        box-shadow: 2px 3px 5px rgba(0,0,0,.3);
      }

      &__list{
        padding: 0;
        margin: 0;
        list-style: none;
      }

      &__item{
        padding: 1rem;
        border-bottom: 1px solid #ccc;

        &:hover{
          background-color: #eee;
          cursor:pointer;
          transition: 0.15s background-color ease-in;
        }
      }
    }

**** DRUHÝ COMMIT ***** (22:48)

otevírání a zavírání
 <div id="select" class="select open">
 a
 <div class="select__dropdown">
 který je implicitně (viz styles.css) neviditelný
   &__dropdown{
     display: none;

 a open ho zviditelní
   &.open{
     .select__dropdown{
       display: block;
     }
     .select__input{
       border-bottom: none;
     }
   }

  třída select (importovaná index.js) totiž má dvě metody?
      open(){
          this.$el.classList.add('open')
      }

      close(){
          this.$el.classList.remove('open')
      }

  v index.js ji v terminálu debugujeme přes proměnnou:
    window.s = select

**** TŘETÍ COMMIT ***** (27:17)


do select.js přeneseme část html
    vytvoříme funkci gettemplate

vytvoříme handlery pro rozevírání v select.js

**** ČTVRTÝ COMMIT ***** 38:55

oprava click handleru aby reagoval i na šipku:

        console.log('type=',type)
        if(type==='input'||type==='arrow'){

            console.log('volám toggle')
            this.toggle()
        }

v index.js zavedeme první položku v options

import {Select} from './select/select.js'
import './select/styles.scss'
const select = new Select('#select',{

    placeholder: 'Vyber položku'

})


a v definici třídy Select zavedeme v konstruktoru options
a v renderu přečteme hodnotu placeholderu a pošleme ji jako
parsmetr do getTemplate

výraz const{placeholder} = this.options
přiřadí položce placeholder jeji hodnotu


export class Select{
    constructor(selector, options){
        this.$el = document.querySelector(selector)
        this.options = options

        this.#render()
        this.#setup()

    }

    #render(){        //privátní metoda
        const{placeholder} = this.options
        this.$el.classList.add('select')
        this.$el.innerHTML=getTemplate(placeholder)
    }

v getTemplate to vykreslíme (a zavedeme jeho omplicitní hodotu,
kdyby mu nebyla přiřazena žádná hodnota === undefinded pomocí
operátoru ??):

const getTemplate =(placeholder) =>{
    const text = placeholder ?? 'implicitní placeholder'
    return `
            <div class="select__input" data-type="input">
                <span>
                   ${placeholder}
                </span>
                <i class="fas fa-chevron-down" data-type="arrow"></i>


nyní v index.js zavedeme druhou položku options - data:

const select = new Select('#select',{

    placeholder: 'Vyber položku',
    data: [
        {id: '1', value: 'React'},
        {id: '2', value: 'Angular'},
        {id: '3', value: 'Vue'},
        {id: '4', value: 'React Native'},
        {id: '5', value: 'Next'},
        {id: '6', value: 'Nest'}
    ]

})

v definici třídy select budeme z options načítat kromě hodnoty
placeholdera i hodnotu položky data a dávat ji jako první argument
do funkce getTemplate:

    #render(){        //privátní metoda
        const{placeholder, data} = this.options
        this.$el.classList.add('select')
        this.$el.innerHTML=getTemplate(data, placeholder)
    }

funkce getTemplate  načte data jako pole, pomocí funkce map()
ho namapuje na pole jednotlivých položek - ale ty stringy jsou
odděleny čárkami, takže pole stringů přeměníme na string pomocí
 ${items.join('')} a tuto hodnotu pak dáme do templátu:

const getTemplate =(data =[], placeholder) =>{
    const text = placeholder ?? 'implicitní placeholder'

    const items = data.map(item =>{
        return `
        <li class="select__item">${item.value}</li>
        `
    })

    return `
            <div class="select__input" data-type="input">
                <span>
                   ${text}
                </span>
                <i class="fas fa-chevron-down" data-type="arrow"></i>

            </div>
            <div class="select__dropdown">
                <ul class="select__list">
                   ${items.join('')}
                </ul>
            </div>
    `
}


a getTemplate vrací hodnotu v privátní (proto#) metodě render:

    #render(){        //privátní metoda
        const{placeholder, data} = this.options
        this.$el.classList.add('select')
        this.$el.innerHTML=getTemplate(data, placeholder)
    }


***** PÁTÝ COMMIT *******
45:00

nyní by bylo dobrí klikat a na položku a změnit výběr v samotném selektu

    v kostruktoru třídy Select přidáme prvek this.selectedId=null

          export class Select{
              constructor(selector, options){
                  this.$el = document.querySelector(selector)
                  this.options = options
                  this.selectedId=null

                  this.#render()
                  this.#setup()

              }

každý prvek bude mít data-type = "item"
                a    data-id=${item.id}

    const items = data.map(item =>{
        return `
        <li class="select__item"  data-type="item" data-id=${item.id}>${item.value}</li>
        `
    })

    a tedˇ bude mít každý prvek unikátní data-id

    v clichHandleru zjistíme id prvku na který jsme klikli a zavoláme veřejnou funkci select

        clickHandler(event){
            const {type } = event.target.dataset

            //console.log('type=',type)
            if(type==='input'||type==='arrow'){

                console.log('volám toggle')
                this.toggle()
            } else if (type === 'item'){
                const id = event.target.dataset.id
                this.select(id)
               //console.log('id=',id)
            }



          select(id){
              this.selectedId = id
              this.$value.textContent=this.current.value
              this.close()
          }

      veřejná funkce 'select' uloží 'id' do pole 'selectedId', z getteru current,
      vyhledá odkaz na příslušnou odpovídající položku value provku s i
      dentifikátorem id a to uloži to textové proměnné ve <spanu s id "value">
      a zavolánmím funkce close() zavře nabídkový seznam


      ( <span data-type="value">
                 ${text}
          </span>)


      napíšeme getetr, který bude zjišťovat value vybraného prvku:

          get current(){
              return this.options.data.find(item =>item.id === this.selectedId)
              //v currentu bude neustále náš vybraný prvek
          }


   Nyní bychom měli označit zvýrazněním který element jsme vybrali, ve stylu
   &__item přidáme styl &selected

     &__item{
       padding: 1rem;
       border-bottom: 1px solid #ccc;

       &.selected{
         background-color: bisque;
       }

       &:hover{
         background-color: #eee;
         cursor:pointer;
         transition: 0.15s background-color ease-in;
       }
     }


     podbarvení uděláme v ve vukce select:


         select(id){
             this.selectedId = id
             this.$value.textContent=this.current.value

             //očistit předtím podbarvené položky
             this.$el.querySelectorAll('[data-type ="item"]').forEach(el =>{
                 el.classList.remove('selected')
             })
             //podbarvíme vybranou položku
             this.$el.querySelector(`[data-id="${id}"]`).classList.add('selected')

             this.close()
         }

   Někdy chceme, aby byl nějaký prvek už vybrán předem.
   Proto v options přidáme další prvek s názvem 'selectedItem' (v souboru index.js)


        import {Select} from './select/select.js'
        import './select/styles.scss'
        const select = new Select('#select',{

            placeholder: 'Vyber položku',
            selectedId: '4',
            data: [
                {id: '1', value: 'React'},
                {id: '2', value: 'Angular'},
                {id: '3', value: 'Vue'},
                {id: '4', value: 'React Native'},
                {id: '5', value: 'Next'},
                {id: '6', value: 'Nest'}
            ]

        })

    v konstruktoru třídy Select: this.selectedId = options.seleced

        export class Select{
            constructor(selector, options){
                this.$el = document.querySelector(selector)
                this.options = options
                //this.selectedId=null
                this.selectedId = options.selectedId

                this.#render()
                this.#setup()
            }



   V getTemplate přidáme parametr selecdedId a a do popisu  prvků třídu cls, která je
   implicitně prázdný řetšzec, když v nějaké položce (item.id===selectedId),
   pak přiřadíme text do očátečního rámečku: text=item.value a označíme třídu cls jaklo
   'selected' kvůli podbarvení v rozevírací nabídce.


        const getTemplate =(data =[], placeholder, selectedId) =>{
            //const text = placeholder ?? 'implicitní placeholder'
            let text = placeholder ?? 'implicitní placeholder'

            const items = data.map(item =>{
                let cls=''
                if (item.id===selectedId){
                    text=item.value
                    cls='selected'
                }
                return `
                <li class="select__item" ${cls} data-type="item" data-id=${item.id}>${item.value}</li>
                `
            })
            ...

můžeme hodnoy vybrané položky měnit programově:
v index.js jsme např. zavedli proměnnou:

window.s = select

a v konzoli prohlížeče např nastavit s.select('2')


rozšíříme veřejnou metodu destroy na odstranění nejen posluchače událostí ale celého selektu:

    destroy(){
        this.$el.removeEventListener('click',this.clickHandler)
        this.$el.innerHTML = ''
    }

a když v konzoli prohlížeče napíšeme s.destroy() . zmizí celý prvek

***** ŠESTÝ COMMIT *******
56:30